import{_ as n,c as a,b as e,o as p}from"./app-C3PLUuww.js";const t={};function l(i,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h2 id="vue-js-源码目录设计" tabindex="-1"><a class="header-anchor" href="#vue-js-源码目录设计"><span>Vue.js 源码目录设计</span></a></h2><p>Vue.js 的源码都在 src 目录下，其目录结构如下。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">src</span>
<span class="line">├─compiler                # 编译相关</span>
<span class="line">├─core                    # 核心代码</span>
<span class="line">├─platforms               # 不同平台</span>
<span class="line">│  └─web                  # 现在只有web了</span>
<span class="line">├─shared                  # 共享代码</span>
<span class="line">├─types                   # typescript 自定义类型</span>
<span class="line">└─v3                      # vue3 支持</span>
<span class="line">  ├─reactivity</span>
<span class="line">  └─sfc-helpers</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="compiler-编译相关" tabindex="-1"><a class="header-anchor" href="#compiler-编译相关"><span>compiler 编译相关</span></a></h3><p>compiler 目录包含 Vue.js 所有编译相关的代码。它包括把模板解析成 ast 语法树，ast 语法树优化，代码生成等功能。<br> 编译的工作可以在构建时做（借助 webpack、vue-loader 等辅助插件）；也可以在运行时做，使用包含构建功能的 Vue.js。<br> 显然，编译是一项耗性能的工作，所以更推荐前者--离线编译。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">compiler</span>
<span class="line">├─codegen         # 代码生成</span>
<span class="line">├─directives      # 指令</span>
<span class="line">└─parser          # 解析器</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="core-核心代码" tabindex="-1"><a class="header-anchor" href="#core-核心代码"><span>core 核心代码</span></a></h3><p>core 目录包含了 Vue.js 的核心代码，包括内置组件、全局 API 封装，Vue 实例化、观察者、虚拟 DOM、工具函数等等， 也是 Vue.js 的灵魂。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">core</span>
<span class="line">├─components        # 内置组件</span>
<span class="line">├─global-api        # 全局API</span>
<span class="line">├─instance          # 实例化</span>
<span class="line">├─observer          # 观察者</span>
<span class="line">├─util              # 工具函数</span>
<span class="line">└─vdom              # 虚拟DOM</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="platform-平台" tabindex="-1"><a class="header-anchor" href="#platform-平台"><span>platform 平台</span></a></h3><p>platform 是 Vue.js 的入口，目前只剩 web 平台，打包成运行在 web 上的 Vue.js。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">├─platforms               # 不同平台</span>
<span class="line">│  └─web                  # 现在只有web了</span>
<span class="line">│      ├─compiler</span>
<span class="line">│      ├─runtime</span>
<span class="line">│      └─util</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shared-共享代码" tabindex="-1"><a class="header-anchor" href="#shared-共享代码"><span>shared 共享代码</span></a></h3><p>Vue.js 会定义⼀些⼯具⽅法，这⾥定义的⼯具⽅法都是会被浏览器端的 Vue.js 和服务端的 Vue.js 所共享 的。</p><h3 id="types-自定义类型" tabindex="-1"><a class="header-anchor" href="#types-自定义类型"><span>types 自定义类型</span></a></h3><p>types 文件下是使用 typescript 声明的 vue.js 自定义类型或第三方库。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">types</span>
<span class="line">├─compiler.ts         # 编译相关</span>
<span class="line">├─component.ts        # 组件数据结构</span>
<span class="line">├─global-api.ts       # Global API 结构</span>
<span class="line">├─modules.d.ts        # 第三方库定义</span>
<span class="line">├─options.ts          # 选项相关</span>
<span class="line">├─ssr.ts              # 服务端渲染相关</span>
<span class="line">├─utils.ts            # 工具类</span>
<span class="line">└─vnode.ts            # 虚拟 node 相关</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue-js-源码构建" tabindex="-1"><a class="header-anchor" href="#vue-js-源码构建"><span>Vue.js 源码构建</span></a></h2><p>Vue.js 源码是基于 Rollup 构建的，它的构建相关配置都在 scripts ⽬录下。</p><h3 id="构建脚本" tabindex="-1"><a class="header-anchor" href="#构建脚本"><span>构建脚本</span></a></h3><p>通常一个基于 NPM 托管的项目都会有一个 package.json 文件，它是对项目的描述，内容实际上是一个标准的 JSON 对象。<br> 通常会配置<code>script</code>字段作为 NPM 的执行脚本，Vue.js 源码构建的脚本如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node scripts/build.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;build:ssr&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run build -- runtime-cjs,server-renderer&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二条命令是在第一条基础上增加了一些参数。<br> 当在命令行运行<code>npm run build</code>时，实际上执行<code>node scripts/build.js</code>。</p><h3 id="构建过程" tabindex="-1"><a class="header-anchor" href="#构建过程"><span>构建过程</span></a></h3><p>对于构建过程是基于源码的，首先打开构建的入口 JS 文件，在<code>scripts/build.js</code>中：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 获取 构建配置文件</span></span>
<span class="line"><span class="token keyword">let</span> builds <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllBuilds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 过滤配置，通过命令行参数过滤出满足条件的配置</span></span>
<span class="line"><span class="token comment">// filter builds via command line arg</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// process.argv[2] == 脚本携带的第一个参数</span></span>
<span class="line">  <span class="token keyword">const</span> filters <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// Array.filter() 返回条件为true 的数组</span></span>
<span class="line">  builds <span class="token operator">=</span> builds<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Array.some() 只要满足一项条件，就整体返回true</span></span>
<span class="line">    <span class="token comment">// indexOf() 只要不存在就返回 -1，否则就返回遍历到的第一个满足元素的下标</span></span>
<span class="line">    <span class="token keyword">return</span> filters<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>output<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> b<span class="token punctuation">.</span>_name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 构建Vuejs</span></span>
<span class="line"><span class="token function">build</span><span class="token punctuation">(</span>builds<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码逻辑非常简单，从配置文件读取配置，再通过命令行参数对构建配置做过滤，这样就可以构建不同用途的 Vue.js。<br> 接下来再看配置文件，在<code>scripts/config.js</code>中：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> builds <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</span></span>
<span class="line">  <span class="token string-property property">&quot;runtime-cjs-dev&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;web/entry-runtime.ts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;dist/vue.runtime.common.dev.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&quot;cjs&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    banner<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">//...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于单个配置，它是遵循 Rollup 的构建规则的。</p><ul><li><code>entry</code>属性表示构建的入口 JS 文件地址；</li><li><code>dest</code>属性表示构建后的 JS 文件地址；</li><li><code>format</code>属性表示构建的格式 <ul><li><code>cjs</code>表示构建出来的文件遵循 CommonJS 规范</li><li><code>es</code>表示构建出来的文件遵循 ES Module 规范</li><li><code>umd</code>表示构建出来的文件遵循 UMD 规范。</li></ul></li><li><code>env</code>属性表示构建的环境</li></ul><p>以<code>runtime-cjs-dev</code>配置为例，它的<code>entry</code>是<code>resolve(&quot;web/entry-runtime.ts&quot;)</code>，这里先看看<code>resolve</code>函数的定义。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 这里 aliases 就是一个对象; 存放的项目模块的路径</span></span>
<span class="line"><span class="token keyword">const</span> aliases <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./alias&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// p 的类型是 string</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> base <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>aliases<span class="token punctuation">[</span>base<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// path.resolve nodejs 提供的路径拼接方法  string.slice(start,end?) 包前不包后，没有end时，默认到末尾</span></span>
<span class="line">    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>aliases<span class="token punctuation">[</span>base<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>resolve</code>函数实现非常简单，它先把<code>resolve</code>函数传入的参数<code>p</code>通过<code>/</code>分割成数组， 然后取数组第一个元素设置为<code>base</code>。<code>base</code>并不是实际路径，它的真实路径接住了别名的配置，在<code>scripts/alias</code>中：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">vue</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;src/platforms/web/entry-runtime-with-compiler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">compiler</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;src/compiler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">core</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;src/core&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;src/shared&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">web</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;src/platforms/web&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;packages/server-renderer/src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">sfc</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;packages/compiler-sfc/src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很显然，这里<code>web</code>对应的真实的路径是<code>src/platforms/web</code>，这个路径就找到了 Vue.js 源码的 web 目录。 然后通过<code>resolve</code>函数通过<code>path.resolve(aliases[base], p.slice(base.length + 1))</code> 找到了最终路径, 它就是 Vue.js 源码 web 目录下的<code>entry-runtime.ts</code>。因此，<code>runtime-cjs-dev</code>配置对应的入口文件就找到了。<br> 他经过 Rollup 的构建打包后，最终会在 dist 目录下生成<code>vue.runtime.common.dev.js</code>。</p><h3 id="runtime-only-vs-runtime-compiler" tabindex="-1"><a class="header-anchor" href="#runtime-only-vs-runtime-compiler"><span>Runtime Only VS Runtime+Compiler</span></a></h3><p>通常我们利用 vue-cli 去初始化我们的 Vue.js 项目的时候会询问我们用 Runtime Only 版本还是 Runtime+compiler 版本。</p><ul><li>Runtime Only <ul><li>我们在使用 Runtime Only 版本的 Vue.js 的时候，通常需要借助如 webpack 的 vue-loader 工具把.vue 文件编译成 JavaScript， 因为实在编译阶段做的，所以它只包含运行时的 Vue.js 代码，因此代码体积也会更轻量。</li></ul></li><li>Runtime+Compiler <ul><li>我们如果没有对代码做预编译，但又使用了 Vue 的 template 属性并传入一个字符串，则需要在客户端编译模板如下所示：</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 需要编译器的版本</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;{{ hi }}&lt;/div&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 这种情况不需要</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为在 Vue.js 2.0 中，最终渲染都是通过<code>render</code>函数，如果写<code>template</code>属性，则需要编译成<code>render</code>函数， 那么这个编译过程会发生运行时，所以需要带有编译器的版本。<br> 很显然，这个编译过程对性能会有一定损耗，所以通常我们更推荐使用 Runtime-Only 的 Vue.js。</p>`,40)]))}const o=n(t,[["render",l],["__file","ready.html.vue"]]),u=JSON.parse('{"path":"/docs/vue/analysis/ready.html","title":"准备工作","lang":"en-US","frontmatter":{"title":"准备工作","date":"2025-01-20T00:00:00.000Z","tags":["vue-analysis"],"categories":["vue-analysis"]},"headers":[{"level":2,"title":"Vue.js 源码目录设计","slug":"vue-js-源码目录设计","link":"#vue-js-源码目录设计","children":[{"level":3,"title":"compiler 编译相关","slug":"compiler-编译相关","link":"#compiler-编译相关","children":[]},{"level":3,"title":"core 核心代码","slug":"core-核心代码","link":"#core-核心代码","children":[]},{"level":3,"title":"platform 平台","slug":"platform-平台","link":"#platform-平台","children":[]},{"level":3,"title":"shared 共享代码","slug":"shared-共享代码","link":"#shared-共享代码","children":[]},{"level":3,"title":"types 自定义类型","slug":"types-自定义类型","link":"#types-自定义类型","children":[]}]},{"level":2,"title":"Vue.js 源码构建","slug":"vue-js-源码构建","link":"#vue-js-源码构建","children":[{"level":3,"title":"构建脚本","slug":"构建脚本","link":"#构建脚本","children":[]},{"level":3,"title":"构建过程","slug":"构建过程","link":"#构建过程","children":[]},{"level":3,"title":"Runtime Only VS Runtime+Compiler","slug":"runtime-only-vs-runtime-compiler","link":"#runtime-only-vs-runtime-compiler","children":[]}]}],"git":{"createdTime":1737305808000,"updatedTime":1737305808000,"contributors":[{"name":"vensen","email":"vensen002@outlook.com","commits":1}]},"filePathRelative":"docs/vue/analysis/ready.md"}');export{o as comp,u as data};
