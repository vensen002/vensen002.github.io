import{_ as s,c as a,b as p,o as e}from"./app-C3PLUuww.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h2 id="apply、call、bind" tabindex="-1"><a class="header-anchor" href="#apply、call、bind"><span>apply、call、bind</span></a></h2><ul><li>在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在</li><li>换句话说，就是为了改变函数体内容 this 的指向</li><li>javascript 的一大特点是 函数存在<code>定义时上下文</code>和<code>运行时上下文</code>以及<code>上下文是可以改变的</code>这样的概念</li></ul><h2 id="this-绑定" tabindex="-1"><a class="header-anchor" href="#this-绑定"><span>this 绑定</span></a></h2><h3 id="this-的绑定规则有几种" tabindex="-1"><a class="header-anchor" href="#this-的绑定规则有几种"><span>this 的绑定规则有几种</span></a></h3><ul><li>默认绑定：独立函数调用，函数没有被绑定到某个对象上进行调用</li><li>隐式绑定：通过某个对象发起的函数调用，在调用对象内部有一个对函数的引用</li><li>显示绑定：明确 this 指向的对象，第一个参数相同并要求传入一个对象 <ul><li>apply/call</li><li>bind</li></ul></li><li>new 绑定： <ul><li>创建一个全新对象</li><li>新对象被执行 prototype 链接</li><li>新对象绑定到函数调用的 this</li><li>如果函数没有返回其他对象，表达式会返回这个对象</li></ul></li></ul><h3 id="this-的面试题解析" tabindex="-1"><a class="header-anchor" href="#this-的面试题解析"><span>this 的面试题解析</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;window&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo4</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;person1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;person2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// person1.foo1() // person1 隐式调⽤</span></span>
<span class="line"><span class="token comment">// person1.foo1.call(person2) // person2 显示调⽤ this指向person2所在的对象</span></span>
<span class="line"><span class="token comment">// person1.foo2(); // person1 箭头函数 向上层作⽤查找 上层作⽤域中的this为person1指向的对象</span></span>
<span class="line"><span class="token comment">// person1.foo2.call(person2); // person1 箭头函数 显示绑定没⽤</span></span>
<span class="line"><span class="token comment">// person1.foo3()() // window 相当于将返回的函数赋值给⼀个变量 指向该变量 是ᇿ⽴函数调⽤</span></span>
<span class="line"><span class="token comment">// person1.foo3.call(person2)() // window 默认调⽤</span></span>
<span class="line"><span class="token comment">// person1.foo3().call(person2) // person2 将函数的this显示绑定到person2所在的对象</span></span>
<span class="line"><span class="token comment">// person1.foo4()() // person1 箭头函数 向上层作⽤域中查找this foo4中的this隐式绑定为person1</span></span>
<span class="line"><span class="token comment">// person1.foo4.call(person2)() // person2 箭头函数 向上层作⽤域中查找this foo4中的this显示绑定为person2</span></span>
<span class="line"><span class="token comment">// person1.foo4().call(person2) // person1 箭头函数显示绑定没⽤ 和person1.foo4()()xiang&#39;tong</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)]))}const c=s(t,[["render",o],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/docs/interview/javascript/","title":"javascript 面试","lang":"en-US","frontmatter":{"title":"javascript 面试","date":"2024-12-20T00:00:00.000Z","tags":["javascript"],"categories":["javascript"]},"headers":[{"level":2,"title":"apply、call、bind","slug":"apply、call、bind","link":"#apply、call、bind","children":[]},{"level":2,"title":"this 绑定","slug":"this-绑定","link":"#this-绑定","children":[{"level":3,"title":"this 的绑定规则有几种","slug":"this-的绑定规则有几种","link":"#this-的绑定规则有几种","children":[]},{"level":3,"title":"this 的面试题解析","slug":"this-的面试题解析","link":"#this-的面试题解析","children":[]}]}],"git":{"createdTime":1734684081000,"updatedTime":1737305825000,"contributors":[{"name":"vensen","email":"vensen002@outlook.com","commits":2}]},"filePathRelative":"docs/interview/javascript/index.md"}');export{c as comp,u as data};
