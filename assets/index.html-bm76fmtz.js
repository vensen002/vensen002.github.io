import{_ as t,c as i,a as n,e,f as l,b as o,r as c,o as r,d as p}from"./app-C3PLUuww.js";const u={},d={class:"table-of-contents"};function k(v,s){const a=c("router-link");return r(),i("div",null,[s[16]||(s[16]=n("h1",{id:"typescript-面试题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#typescript-面试题"},[n("span",null,"TypeScript 面试题")])],-1)),n("nav",d,[n("ul",null,[n("li",null,[e(a,{to:"#typescript-的内置数据类型有哪些"},{default:l(()=>s[0]||(s[0]=[p("TypeScript 的内置数据类型有哪些？")])),_:1})]),n("li",null,[e(a,{to:"#any和unknown有什么区别"},{default:l(()=>s[1]||(s[1]=[p("any和unknown有什么区别")])),_:1})]),n("li",null,[e(a,{to:"#如何将-unknown-类型指定为一个更具体的类型"},{default:l(()=>s[2]||(s[2]=[p("如何将 unknown 类型指定为一个更具体的类型")])),_:1})]),n("li",null,[e(a,{to:"#typescript-中命名空间与模块区别"},{default:l(()=>s[3]||(s[3]=[p("TypeScript 中命名空间与模块区别")])),_:1})]),n("li",null,[e(a,{to:"#typescript的理解-与-javascript-的区别"},{default:l(()=>s[4]||(s[4]=[p("typescript的理解 与 javascript 的区别")])),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#typescript-是什么"},{default:l(()=>s[5]||(s[5]=[p("typescript 是什么")])),_:1})]),n("li",null,[e(a,{to:"#typescript-的特性"},{default:l(()=>s[6]||(s[6]=[p("typescript 的特性")])),_:1})]),n("li",null,[e(a,{to:"#ts-与-js-的区别"},{default:l(()=>s[7]||(s[7]=[p("ts 与 js 的区别")])),_:1})])])]),n("li",null,[e(a,{to:"#使用-ts-实现一个判断入参是否是数组类型的方法"},{default:l(()=>s[8]||(s[8]=[p("使用 ts 实现一个判断入参是否是数组类型的方法")])),_:1})]),n("li",null,[e(a,{to:"#tsconfig-json-文件有什么用"},{default:l(()=>s[9]||(s[9]=[p("tsconfig.json 文件有什么用")])),_:1})]),n("li",null,[e(a,{to:"#declare-关键字的作用"},{default:l(()=>s[10]||(s[10]=[p("declare 关键字的作用")])),_:1})]),n("li",null,[e(a,{to:"#typescript支持的访问修饰符有哪些"},{default:l(()=>s[11]||(s[11]=[p("TypeScript支持的访问修饰符有哪些")])),_:1})]),n("li",null,[e(a,{to:"#typescript中有哪些声明变量的方式"},{default:l(()=>s[12]||(s[12]=[p("TypeScript中有哪些声明变量的方式")])),_:1})]),n("li",null,[e(a,{to:"#typescript中的枚举"},{default:l(()=>s[13]||(s[13]=[p("TypeScript中的枚举")])),_:1})]),n("li",null,[e(a,{to:"#typescript-的主要特点"},{default:l(()=>s[14]||(s[14]=[p("TypeScript 的主要特点")])),_:1})]),n("li",null,[e(a,{to:"#typescript中的方法重写"},{default:l(()=>s[15]||(s[15]=[p("TypeScript中的方法重写")])),_:1})])])]),s[17]||(s[17]=o(`<h2 id="typescript-的内置数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#typescript-的内置数据类型有哪些"><span>TypeScript 的内置数据类型有哪些？</span></a></h2><ul><li>boolean：true 或 false</li><li>number：整数和浮点数</li><li>bigint：特殊的数字类型，它提供了对任意长度整数的支持</li><li>string：字符串，单引号或双引号包围</li><li>void：无返回值</li><li>null和undefined：所有类型的子类型</li><li>symbol：表示独特的值，类似于数字或字符串。</li></ul><p>复合类型：</p><ul><li>array：表示元素类型为T的数组</li><li>tuple：元组，表示已知元素数量和类型的数组</li><li>enum：枚举</li><li>any：任意类型</li><li>unknown：与any类似，但是在更严格的类型检查下使用</li><li>object：非原始类型的对象</li></ul><h2 id="any和unknown有什么区别" tabindex="-1"><a class="header-anchor" href="#any和unknown有什么区别"><span>any和unknown有什么区别</span></a></h2><ul><li>unknown 和 any 类似，只不过 unknown 类型更加严格，不像 any 那样不用做类型检查</li><li>反而 unknow n因为未知性质，不允许访问属性，不允许赋值给其他有明确类型的变量。</li></ul><h2 id="如何将-unknown-类型指定为一个更具体的类型" tabindex="-1"><a class="header-anchor" href="#如何将-unknown-类型指定为一个更具体的类型"><span>如何将 unknown 类型指定为一个更具体的类型</span></a></h2><ul><li>使用typeof进行类型判断</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">unknownToString</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用类型断言</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> parseLinkDestination <span class="token keyword">from</span> <span class="token string">&quot;markdown-it/lib/helpers/parse_link_destination&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> aaa<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token string">&#39;unknown&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> bbb<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> aaa <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> ccc<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> aaa<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用断言可以解决编译时报错问题，只不过运行时类型不对会报错</p></blockquote><h2 id="typescript-中命名空间与模块区别" tabindex="-1"><a class="header-anchor" href="#typescript-中命名空间与模块区别"><span>TypeScript 中命名空间与模块区别</span></a></h2><p>模块</p><ul><li>任何包含顶级 import 或 export 的文件都可以当成一个模块</li><li>相反的，没有import 或 export 的声明的文件，那么它的内容就是全局可见的</li></ul><p>命名空间</p><ul><li>最明确的目的就是解决重名问题，不同的命名空间就是不同的作用域</li><li>使用 namespace 来声明命名空间</li></ul><p>区别</p><ul><li>命名空间是位于全局空间下的一个带有名字的JavaScript对象。但是它难识别组件之间的依赖关系</li><li>模块可以包含代码和声明。不同的是模块可以声明它的依赖</li><li>正常项目开发过程中不建议使用命名空间</li></ul><h2 id="typescript的理解-与-javascript-的区别" tabindex="-1"><a class="header-anchor" href="#typescript的理解-与-javascript-的区别"><span>typescript的理解 与 javascript 的区别</span></a></h2><h3 id="typescript-是什么" tabindex="-1"><a class="header-anchor" href="#typescript-是什么"><span>typescript 是什么</span></a></h3><ul><li>TypeScript 是 JavaScript 的超集，支持ES6语法，扩展了 JavaScript的语法</li><li>支持面向对象编程的概念，如类、接口、继承、泛型等</li><li>在 js 的基础上，为 js 添加了类型支持</li><li>静态类型检查的语言，编译阶段就可以检查出数据类型错误</li><li>typescript 最终会编译成纯 JavaScript 运行</li><li>为大型应用之开发而设计的语言</li></ul><h3 id="typescript-的特性" tabindex="-1"><a class="header-anchor" href="#typescript-的特性"><span>typescript 的特性</span></a></h3><ul><li>类型批准和编译时类型检查</li><li>类型推断</li><li>类型擦除：编译过程中批注的内容和接口会在运行时以用工具擦除</li><li>接口：在 ts 中用接口来定义对象类型</li><li>枚举：用于取值别限定在一定范围内的场景</li><li>泛型编程：可以指定以后才明确的类型</li><li>命名空间</li><li>元组：一种明确数据类型和数量的数组</li></ul><h3 id="ts-与-js-的区别" tabindex="-1"><a class="header-anchor" href="#ts-与-js-的区别"><span>ts 与 js 的区别</span></a></h3><ul><li>typescript 是 JavaScript 的超级，扩展了 JavaScript的语法</li><li>typescript 可以处理 JavaScript 代码，并只对其中 typescript 代码进行编译</li><li>typescript 文件的后缀名 .ts，JavaScript 的是 .js</li><li>typescript 文件最终会编译成 JavaScript 文件</li></ul><h2 id="使用-ts-实现一个判断入参是否是数组类型的方法" tabindex="-1"><a class="header-anchor" href="#使用-ts-实现一个判断入参是否是数组类型的方法"><span>使用 ts 实现一个判断入参是否是数组类型的方法</span></a></h2><ul><li>使用unknown 接收参数，Array.isArray()进行判断</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tsconfig-json-文件有什么用" tabindex="-1"><a class="header-anchor" href="#tsconfig-json-文件有什么用"><span>tsconfig.json 文件有什么用</span></a></h2><ul><li>tsconfig.json 是 ts 编译器的配置文件，ts 可以根据它来对代码进行编译</li><li>tsconfig.json 文件所在目录表示项目的根目录</li></ul><div class="language-json5 line-numbers-mode" data-highlighter="prismjs" data-ext="json5" data-title="json5"><pre><code><span class="line"><span class="token comment">// 常用配置</span></span>
<span class="line"><span class="token comment">// 常用配置</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">      tsconfig.json是ts编译器的配置文件，ts可以根据它的信息来对待吗进行编译 可以再tsconfig中写注释</span>
<span class="line">      include : 用来指定哪些文件需要被编译</span>
<span class="line">      exclude : 用来指定哪些文件不需要被编译 ：默认node_module</span>
<span class="line">      extends : 用来指定继承的配置文件</span>
<span class="line">      files   : 用来指定被编译的文件列表，只有编译少量文件才使用</span>
<span class="line">      compilerOptions : 编译器的选项是配置文件中非常重要也是非常复杂的配置选项</span>
<span class="line">  */</span></span>
<span class="line">  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token comment">// ** : 任意目录 ， * : 任意文件</span></span>
<span class="line">    <span class="token string">&quot;./src/**/*&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;./src/hello/**/*&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// &quot;extends&quot;: &quot;./configs/base&quot;,</span></span>
<span class="line">  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;1.ts&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// &quot;2.ts&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 用来指定 ES 版本 ESNext : 最新版。 &#39;ES3&#39;, &#39;ES5&#39;, &#39;ES6&#39;/&#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, &#39;ES2018&#39;, &#39;ES2019&#39;, &#39;ES2020&#39;, &#39;ESNext&#39;</span></span>
<span class="line">    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ES2020&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 指定要使用模块化的规范 : &#39;None&#39;, &#39;CommonJS&#39;, &#39;AMD&#39;, &#39;System&#39;, &#39;UMD&#39;, &#39;ES6&#39;/&#39;ES2015&#39;, &#39;ES2020&#39; or &#39;ESNext&#39;</span></span>
<span class="line">    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 用来指定项目中要使用的库 &#39;ES5&#39;, &#39;ES6&#39;, &#39;ES2015&#39;, &#39;ES7&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, &#39;ES2018&#39;, &#39;ESNext&#39;, &#39;DOM&#39;, &#39;DOM.Iterable&#39;,</span></span>
<span class="line">    <span class="token comment">//                          &#39;WebWorker&#39;, &#39;ScriptHost&#39;, &#39;ES2015.Core&#39;, &#39;ES2015.Collection&#39;, &#39;ES2015.Generator&#39;, &#39;ES2015.Iterable&#39;, </span></span>
<span class="line">    <span class="token comment">//                          &#39;ES2015.Promise&#39;, &#39;ES2015.Proxy&#39;, &#39;ES2015.Reflect&#39;, &#39;ES2015.Symbol&#39;, &#39;ES2015.Symbol.WellKnown&#39;, </span></span>
<span class="line">    <span class="token comment">//                          &#39;ES2016.Array.Include&#39;, &#39;ES2017.object&#39;, &#39;ES2017.Intl&#39;, &#39;ES2017.SharedMemory&#39;, &#39;ES2017.String&#39;, </span></span>
<span class="line">    <span class="token comment">//                          &#39;ES2017.TypedArrays&#39;, &#39;ES2018.Intl&#39;, &#39;ES2018.Promise&#39;, &#39;ES2018.RegExp&#39;, &#39;ESNext.AsyncIterable&#39;, </span></span>
<span class="line">    <span class="token comment">//                          &#39;ESNext.Array&#39;, &#39;ESNext.Intl&#39;, &#39;ESNext.Symbol&#39;</span></span>
<span class="line">    <span class="token comment">// 运行在浏览器中不用设置，运行在node或其他中才需要设置</span></span>
<span class="line">    <span class="token comment">// &quot;lib&quot;:[]，</span></span>
<span class="line">    <span class="token comment">// 用来指定编译后文件的存放位置</span></span>
<span class="line">    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span><span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 将代码合并为一个文件,设置之后所有的全局作用域中的代码会合并到同一个文件中 但是只能在  &#39;amd&#39; and &#39;system&#39; 中才能使用</span></span>
<span class="line">    <span class="token comment">// &quot;outFile&quot;: &quot;./dist/app.js&quot;,</span></span>
<span class="line">    <span class="token comment">// 是否对js文件进行编译，默认false</span></span>
<span class="line">    <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 是否检查js代码是否符合语法规范，默认false</span></span>
<span class="line">    <span class="token property">&quot;checkJs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 是否移除注释，默认false</span></span>
<span class="line">    <span class="token property">&quot;removeComments&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 是否不生成编译后文件，默认false</span></span>
<span class="line">    <span class="token property">&quot;noEmit&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 当有错误时是否生成文件，默认false</span></span>
<span class="line">    <span class="token property">&quot;noEmitOnError&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 是否生成sourceMap，默认false  这个文件里保存的，是转换后代码的位置，和对应的转换前的位置。有了它，出错的时候，通过断点工具可以直接显示原始代码，而不是转换后的代码。</span></span>
<span class="line">    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 所有的严格检查的总开关，默认false</span></span>
<span class="line">    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 编译后的文件是否开启严格模式，默认false</span></span>
<span class="line">    <span class="token property">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 不允许隐式的any，默认false(允许)</span></span>
<span class="line">    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 不允许隐式的this，默认false(允许)</span></span>
<span class="line">    <span class="token property">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 是否严格的检查空值，默认false 检查有可能为null的地方</span></span>
<span class="line">    <span class="token property">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 是否严格检查bind、call和apply的参数列表，默认false  检查是否有多余参数</span></span>
<span class="line">    <span class="token property">&quot;strictBindCallApply&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 是否严格检查函数的类型，</span></span>
<span class="line">    <span class="token property">&quot;strictFunctionTypes&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 是否严格检查属性是否初始化，默认false</span></span>
<span class="line">    <span class="token property">&quot;strictPropertyInitialization&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 是否检查switch语句包含正确的break，默认false</span></span>
<span class="line">    <span class="token property">&quot;noFallthroughCasesInSwitch&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 检查函数没有隐式的返回值，默认false</span></span>
<span class="line">    <span class="token property">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 是否检查检查未使用的局部变量，默认false</span></span>
<span class="line">    <span class="token property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 是否检查未使用的参数，默认false</span></span>
<span class="line">    <span class="token property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 是否检查不可达代码报错，默认false   true，忽略不可达代码 false，不可达代码将引起错误</span></span>
<span class="line">    <span class="token property">&quot;allowUnreachableCode&quot;</span><span class="token operator">:</span><span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="declare-关键字的作用" tabindex="-1"><a class="header-anchor" href="#declare-关键字的作用"><span>declare 关键字的作用</span></a></h2><ul><li>declare关键字用于<code>环境声明</code>和您要定义可能在其他位置存在的<code>变量</code>的方法</li><li>JavaScript库或框架没有TypeScript声明文件，想要在ts中没有错误提示的使用就要用declare 来声明</li></ul><h2 id="typescript支持的访问修饰符有哪些" tabindex="-1"><a class="header-anchor" href="#typescript支持的访问修饰符有哪些"><span>TypeScript支持的访问修饰符有哪些</span></a></h2><ul><li>更 Java 的访问修饰符一样 public、projected、private</li><li>public：类的所有成员及其子类和实例都可以访问</li><li>projected：该类及其子类的所有成员都可以访问，但实例不可以</li><li>private：只有该类的成员可以访问</li></ul><h2 id="typescript中有哪些声明变量的方式" tabindex="-1"><a class="header-anchor" href="#typescript中有哪些声明变量的方式"><span>TypeScript中有哪些声明变量的方式</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 声明类型和值</span></span>
<span class="line highlighted"><span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 声明类型</span></span>
<span class="line highlighted"><span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 声明值</span></span>
<span class="line highlighted"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 无值和类型声明</span></span>
<span class="line highlighted"><span class="token keyword">let</span> value<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typescript中的枚举" tabindex="-1"><a class="header-anchor" href="#typescript中的枚举"><span>TypeScript中的枚举</span></a></h2><ul><li>枚举就是定义一些带名字的常量，可以清晰地表达意图或区别的用例。</li><li>ts中枚举的值可以是数字或字符串。</li></ul><h2 id="typescript-的主要特点" tabindex="-1"><a class="header-anchor" href="#typescript-的主要特点"><span>TypeScript 的主要特点</span></a></h2><ul><li>跨平台：typescript 编译器可以安装到任何操作系统上</li><li>ES6 特性：ts 包含计划中的 ES6的大部分特性</li><li>面向对象语言：提供标准的 OOP 功能</li><li>静态类型检查：编译时进行类型检查</li><li>可选静态类型</li><li>DOM操作：使用 ts 来操作 DOM 已添加或删除客户端网页元素</li></ul><h2 id="typescript中的方法重写" tabindex="-1"><a class="header-anchor" href="#typescript中的方法重写"><span>TypeScript中的方法重写</span></a></h2><ul><li>与 Java 的重写一样，重写发生在父子类中</li><li>方法名称、参数必须跟父类一致</li><li>返回类型可以不一致，但必须是父类返回值的派生类</li></ul>`,44))])}const b=t(u,[["render",k],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/docs/interview/typescript/","title":"TypeScript 面试题","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"TypeScript 的内置数据类型有哪些？","slug":"typescript-的内置数据类型有哪些","link":"#typescript-的内置数据类型有哪些","children":[]},{"level":2,"title":"any和unknown有什么区别","slug":"any和unknown有什么区别","link":"#any和unknown有什么区别","children":[]},{"level":2,"title":"如何将 unknown 类型指定为一个更具体的类型","slug":"如何将-unknown-类型指定为一个更具体的类型","link":"#如何将-unknown-类型指定为一个更具体的类型","children":[]},{"level":2,"title":"TypeScript 中命名空间与模块区别","slug":"typescript-中命名空间与模块区别","link":"#typescript-中命名空间与模块区别","children":[]},{"level":2,"title":"typescript的理解 与 javascript 的区别","slug":"typescript的理解-与-javascript-的区别","link":"#typescript的理解-与-javascript-的区别","children":[{"level":3,"title":"typescript 是什么","slug":"typescript-是什么","link":"#typescript-是什么","children":[]},{"level":3,"title":"typescript 的特性","slug":"typescript-的特性","link":"#typescript-的特性","children":[]},{"level":3,"title":"ts 与 js 的区别","slug":"ts-与-js-的区别","link":"#ts-与-js-的区别","children":[]}]},{"level":2,"title":"使用 ts 实现一个判断入参是否是数组类型的方法","slug":"使用-ts-实现一个判断入参是否是数组类型的方法","link":"#使用-ts-实现一个判断入参是否是数组类型的方法","children":[]},{"level":2,"title":"tsconfig.json 文件有什么用","slug":"tsconfig-json-文件有什么用","link":"#tsconfig-json-文件有什么用","children":[]},{"level":2,"title":"declare 关键字的作用","slug":"declare-关键字的作用","link":"#declare-关键字的作用","children":[]},{"level":2,"title":"TypeScript支持的访问修饰符有哪些","slug":"typescript支持的访问修饰符有哪些","link":"#typescript支持的访问修饰符有哪些","children":[]},{"level":2,"title":"TypeScript中有哪些声明变量的方式","slug":"typescript中有哪些声明变量的方式","link":"#typescript中有哪些声明变量的方式","children":[]},{"level":2,"title":"TypeScript中的枚举","slug":"typescript中的枚举","link":"#typescript中的枚举","children":[]},{"level":2,"title":"TypeScript 的主要特点","slug":"typescript-的主要特点","link":"#typescript-的主要特点","children":[]},{"level":2,"title":"TypeScript中的方法重写","slug":"typescript中的方法重写","link":"#typescript中的方法重写","children":[]}],"git":{"createdTime":1734637665000,"updatedTime":1734637665000,"contributors":[{"name":"vensen","email":"vensen002@outlook.com","commits":1}]},"filePathRelative":"docs/interview/typescript/index.md"}');export{b as comp,y as data};
